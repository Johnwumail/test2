# Demo: Ubuntu OS Installation on Dell PowerEdge Server
# This configuration automates the installation of Ubuntu on Dell PowerEdge servers using iDRAC with Redfish

# Target iDRAC information
idrac:
  hostname: "idrac-server01.example.com"  # Replace with your actual iDRAC hostname/IP
  username: "root"                        # iDRAC username
  password: "{{ idrac_password }}"        # Use secure variable from environment
  port: 443                               # Default iDRAC HTTPS port
  verify_ssl: false                       # Whether to verify SSL certificates

# Server information
server:
  model: "PowerEdge R740"                 # Server model
  service_tag: "ABC1234"                  # Dell service tag (optional)
  update_firmware: true                   # Whether to update firmware before OS installation
  firmware_update_timeout: 1800           # Timeout for firmware update in seconds

# OS installation
os:
  name: "Ubuntu"
  version: "22.04 LTS"
  edition: "Server"
  installation_type: "minimal"            # Options: minimal, standard, desktop

# Storage configuration
storage:
  raid_level: "1"                         # Options: 0, 1, 5, 6, 10
  disks_to_use: "all"                     # Options: all, [list of disk IDs]
  boot_disk_size_gb: 100                  # Size for the OS partition in GB
  preserve_existing_data: false           # WARNING: set to true to preserve existing data

# Network configuration
network:
  dhcp: false                             # Whether to use DHCP
  static:
    ip_address: "192.168.1.100"           # Static IP address
    subnet_mask: "255.255.255.0"          # Subnet mask
    gateway: "192.168.1.1"                # Default gateway
    dns_servers:                          # DNS servers
      - "192.168.1.10"
      - "8.8.8.8"
  hostname: "ubuntu-server01"             # Server hostname
  domain: "example.com"                   # Domain name
  additional_interfaces: []               # Additional network interfaces

# User configuration
users:
  - username: "admin"
    password: "{{ admin_password }}"      # Use secure variable from environment
    sudo: true                            # Whether to add user to sudoers
    ssh_key: "{{ admin_ssh_key }}"        # Use secure variable from environment

# Post-installation
post_install:
  # Packages to install after OS installation
  packages:
    - openssh-server
    - vim
    - htop
    - net-tools
    - curl
    - python3
    - python3-pip
  
  # Commands to execute after installation
  commands:
    - "systemctl enable ssh"
    - "ufw allow 22/tcp"
    - "ufw enable"
  
  # Files to copy to the server after installation
  files:
    - source: "templates/ntp.conf"
      destination: "/etc/ntp.conf"
    - source: "templates/sshd_config"
      destination: "/etc/ssh/sshd_config"

# Redfish specific settings
redfish:
  # ISO settings (where to get the installation media)
  iso:
    source_type: "http"                   # Options: http, nfs, cifs, local
    source_path: "http://mirrors.example.com/ubuntu-22.04-server-amd64.iso"
    mount_options: ""                     # Additional mount options
  
  # Boot settings
  boot:
    boot_mode: "UEFI"                     # Options: UEFI, BIOS
    secure_boot: true                     # Whether to enable secure boot
    boot_order:
      - "HardDisk"
      - "CD/DVD"
      - "Network"
    one_time_boot: "VirtualCD"            # Boot from virtual CD for installation
  
  # Job management
  jobs:
    check_interval: 30                    # Job check interval in seconds
    timeout: 7200                         # Job timeout in seconds

# Monitoring and validation
monitoring:
  # Pre-installation checks
  pre_checks:
    - hardware_inventory                  # Check hardware inventory
    - storage_health                      # Check storage health
    - firmware_versions                   # Check firmware versions
    - memory_test                         # Test memory
  
  # Post-installation validation
  validation:
    ping_test: true                       # Test network connectivity
    ssh_test: true                        # Test SSH connectivity
    service_tests:                        # Test services
      - ssh
      - ufw
    report_format: "html"                 # Options: text, html, json

# Notification settings
notification:
  enabled: true
  channels:
    - type: "email"
      recipients:
        - "admin@example.com"
    - type: "slack"
      webhook: "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK"
      channel: "#server-provisioning"
  
  # When to send notifications
  notify_on:
    start: true
    complete: true
    error: true
  
  # Attach reports to notifications
  attach_report: true

# Rollback options
rollback:
  enabled: true
  automatic_on_failure: false             # Whether to automatically roll back on failure
  preserve_logs: true                     # Whether to preserve logs after rollback 