---
# Ansible Playbook for Web Server Setup
# This playbook installs and configures Nginx web server 
# with basic security and performance optimizations

- name: Setup Web Server with Nginx
  hosts: web_servers
  become: yes
  vars:
    nginx_port: 80
    nginx_server_name: "{{ inventory_hostname }}"
    nginx_root: /var/www/html
    nginx_worker_processes: auto
    nginx_worker_connections: 1024
    nginx_client_max_body_size: 10M
    firewall_allowed_ports:
      - "{{ nginx_port }}"
      - 443
      - 22

  tasks:
    - name: Update package cache
      apt:
        update_cache: yes
        cache_valid_time: 3600
      when: ansible_os_family == "Debian"

    - name: Install Nginx and required packages
      package:
        name:
          - nginx
          - ufw
          - certbot
          - python3-certbot-nginx
        state: present

    - name: Create web root directory
      file:
        path: "{{ nginx_root }}"
        state: directory
        owner: www-data
        group: www-data
        mode: '0755'

    - name: Create sample index.html
      copy:
        content: |
          <!DOCTYPE html>
          <html>
          <head>
            <title>Welcome to {{ nginx_server_name }}</title>
            <style>
              body {
                font-family: Arial, sans-serif;
                line-height: 1.6;
                margin: 40px;
                color: #333;
              }
              h1 {
                color: #0066cc;
              }
              .container {
                max-width: 800px;
                margin: 0 auto;
                border: 1px solid #ddd;
                padding: 20px;
                border-radius: 5px;
                box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
              }
              footer {
                margin-top: 20px;
                font-size: 0.8em;
                color: #777;
                text-align: center;
              }
            </style>
          </head>
          <body>
            <div class="container">
              <h1>Welcome to {{ nginx_server_name }}</h1>
              <p>If you see this page, the web server is successfully installed and working.</p>
              <p>This is a sample page generated by the IT Admin Agent ansible playbook.</p>
              <p>The server is running Nginx on {{ ansible_distribution }} {{ ansible_distribution_version }}.</p>
              <p>To replace this page, place your files in <code>{{ nginx_root }}</code>.</p>
            </div>
            <footer>
              <p>Generated on {{ ansible_date_time.iso8601 }}</p>
            </footer>
          </body>
          </html>
        dest: "{{ nginx_root }}/index.html"
        owner: www-data
        group: www-data
        mode: '0644'

    - name: Configure Nginx global settings
      template:
        src: nginx.conf.j2
        dest: /etc/nginx/nginx.conf
        owner: root
        group: root
        mode: '0644'
      notify: Restart Nginx

    - name: Configure Nginx site
      template:
        src: default-site.conf.j2
        dest: /etc/nginx/sites-available/default
        owner: root
        group: root
        mode: '0644'
      notify: Restart Nginx

    - name: Enable Nginx site
      file:
        src: /etc/nginx/sites-available/default
        dest: /etc/nginx/sites-enabled/default
        state: link
      notify: Restart Nginx

    - name: Configure UFW firewall
      ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
      loop: "{{ firewall_allowed_ports }}"
      when: ansible_os_family == "Debian"

    - name: Enable UFW
      ufw:
        state: enabled
        policy: deny
      when: ansible_os_family == "Debian"

    - name: Start and enable Nginx service
      service:
        name: nginx
        state: started
        enabled: yes

  handlers:
    - name: Restart Nginx
      service:
        name: nginx
        state: restarted

  # Templates included inline for convenience
  vars:
    nginx_conf_j2: |
      user www-data;
      worker_processes {{ nginx_worker_processes }};
      pid /run/nginx.pid;
      include /etc/nginx/modules-enabled/*.conf;

      events {
        worker_connections {{ nginx_worker_connections }};
        multi_accept on;
      }

      http {
        # Basic Settings
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;
        client_max_body_size {{ nginx_client_max_body_size }};
        server_tokens off;

        # MIME Types
        include /etc/nginx/mime.types;
        default_type application/octet-stream;

        # SSL Settings
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384';
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 1d;

        # Logging Settings
        access_log /var/log/nginx/access.log;
        error_log /var/log/nginx/error.log;

        # Gzip Settings
        gzip on;
        gzip_disable "msie6";
        gzip_vary on;
        gzip_proxied any;
        gzip_comp_level 6;
        gzip_buffers 16 8k;
        gzip_http_version 1.1;
        gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

        # Virtual Host Configs
        include /etc/nginx/conf.d/*.conf;
        include /etc/nginx/sites-enabled/*;
      }

    default_site_conf_j2: |
      server {
        listen {{ nginx_port }} default_server;
        listen [::]:{{ nginx_port }} default_server;

        root {{ nginx_root }};
        index index.html index.htm index.nginx-debian.html;

        server_name {{ nginx_server_name }};

        location / {
          try_files $uri $uri/ =404;
        }

        # Security headers
        add_header X-Content-Type-Options nosniff;
        add_header X-Frame-Options SAMEORIGIN;
        add_header X-XSS-Protection "1; mode=block";
        add_header Content-Security-Policy "default-src 'self';";
        add_header Referrer-Policy strict-origin-when-cross-origin;

        # Deny access to hidden files
        location ~ /\. {
          deny all;
          access_log off;
          log_not_found off;
        }
      }

  tasks:
    - name: Create Nginx config template
      copy:
        content: "{{ nginx_conf_j2 }}"
        dest: /tmp/nginx.conf.j2
        owner: root
        group: root
        mode: '0644'

    - name: Create Nginx site template
      copy:
        content: "{{ default_site_conf_j2 }}"
        dest: /tmp/default-site.conf.j2
        owner: root
        group: root
        mode: '0644'

    - name: Use the templates
      set_fact:
        ansible_local_tmp: /tmp 